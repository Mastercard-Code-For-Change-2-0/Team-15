import { WebSocketServer } from 'ws';
import { createServer } from 'http';

// Store all connected clients (users) in this array
let connectedClients = [];

// This function handles GET requests to our WebSocket endpoint
export async function GET(request) {
  // Check if this is a WebSocket upgrade request
  // When a browser wants to connect via WebSocket, it sends special headers
  if (request.headers.get('upgrade') === 'websocket') {
    
    // Create a new WebSocket server
    const wss = new WebSocketServer({ 
      port: 8080,  // The port where our WebSocket server will listen
      perMessageDeflate: false  // Disable compression for simplicity
    });

    // This event fires whenever a new client connects
    wss.on('connection', function connection(ws, request) {
      console.log('🎉 New client connected!');
      
      // Add this new client to our list of connected clients
      connectedClients.push(ws);
      
      // Send a welcome message to the newly connected client
      ws.send(JSON.stringify({
        type: 'welcome',  // Type of message (we can have different types)
        message: 'Welcome to the chat!',
        timestamp: new Date().toISOString()  // Current time
      }));

      // This event fires whenever we receive a message from a client
      ws.on('message', function message(data) {
        console.log('📨 Received message:', data.toString());
        
        try {
          // Convert the received message from JSON string to JavaScript object
          const messageData = JSON.parse(data.toString());
          
          // Create a message object to send to all clients
          const broadcastMessage = {
            type: 'chat',  // This is a chat message
            user: messageData.user || 'Anonymous',  // Who sent it
            message: messageData.message,  // The actual message
            timestamp: new Date().toISOString()  // When it was sent
          };

          // Send this message to ALL connected clients
          // This is called "broadcasting"
          connectedClients.forEach(client => {
            // Check if the client connection is still open
            if (client.readyState === 1) {  // 1 means "OPEN"
              // Send the message as a JSON string
              client.send(JSON.stringify(broadcastMessage));
            }
          });

        } catch (error) {
          console.error('❌ Error parsing message:', error);
          // If there's an error, send an error message back to the sender
          ws.send(JSON.stringify({
            type: 'error',
            message: 'Invalid message format'
          }));
        }
      });

      // This event fires when a client disconnects
      ws.on('close', function close() {
        console.log('👋 Client disconnected');
        // Remove this client from our list of connected clients
        connectedClients = connectedClients.filter(client => client !== ws);
      });

      // This event fires if there's an error with the connection
      ws.on('error', function error(err) {
        console.error('🚨 WebSocket error:', err);
        // Remove this client from our list if there's an error
        connectedClients = connectedClients.filter(client => client !== ws);
      });
    });

    // Return a response indicating WebSocket server is running
    return new Response('WebSocket server started on port 8080', {
      status: 200,
      headers: {
        'Content-Type': 'text/plain',
      },
    });
  }

  // If it's not a WebSocket request, return a regular response
  return new Response('This endpoint is for WebSocket connections only', {
    status: 400,
  });
}
